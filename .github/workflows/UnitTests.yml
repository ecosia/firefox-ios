name: UnitTests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build_for_testing:
    runs-on: macos-latest
    name: Build App
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.2.0.app/Contents/Developer

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install pip modules
      run: |
         python3 -m pip install virtualenv

    - name: Install gems
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7
        bundler-cache: true

    - name: Install npm
      uses: bahmutov/npm-install@v1.6.0

    - name: Restore Content Blocker Cache
      id: restore-content-blocker-cache
      uses: actions/cache/restore@v3
      with:
        path: |
          content-blocker-lib-ios/
          shavar-prod-lists/
          Client/Assets/AllFramesAtDocument*.js
          Client/Assets/MainFrameAtDocument*.js
          Client/Assets/*.js.LICENSE.txt
        key: ${{ runner.os }}-content-blocker-cache-${{ hashFiles('content_blocker_commit_sha.txt') }}

    - name: Run content blocker scripts
      if: steps.restore-content-blocker-cache.outputs.cache-hit != 'true'
      run: ./content_blocker_update.sh

    - name: Save Content Blocker Cache
      if: steps.restore-spm-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          content-blocker-lib-ios/
          shavar-prod-lists/
          Client/Assets/AllFramesAtDocument*.js
          Client/Assets/MainFrameAtDocument*.js
          Client/Assets/*.js.LICENSE.txt
        key: ${{ runner.os }}-content-blocker-cache-${{ hashFiles('content_blocker_commit_sha.txt') }}

    - name: Fix-up private Github URLs
      run: find . -type f \( -name '*.pbxproj' -o -name 'Package.swift' -o -name 'Package.resolved' \) -exec sed -i '' "s/https:\/\/github.com\/${GITHUB_REPOSITORY_OWNER}/https:\/\/${GITHUB_ACCESS_TOKEN}@github.com\/${GITHUB_REPOSITORY_OWNER}/g" {} \;
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.IOS_CORE_TOKEN }}

    - name: Create empty Staging xcconfig
      run: touch Client/Configuration/Staging.xcconfig

    - name: Restore SPM Cache
      id: restore-spm-cache
      uses: actions/cache/restore@v3
      with:
        path: SourcePackages/
        key: ${{ runner.os }}-spm-cache-${{ hashFiles('Client.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}

    - name: Build for testing
      run: bundle exec fastlane run run_tests build_for_testing:true
    
    - name: Upload derived data
      uses: actions/upload-artifact@master
      with:
        name: derived-data
        path: ${{env.SCAN_DERIVED_DATA_PATH}}

    - name: Save SPM Cache
      if: steps.restore-spm-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: SourcePackages/
        key: ${{ runner.os }}-spm-cache-${{ hashFiles('Client.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}
    
    outputs:
      derived_data_folder_path: ${{env.SCAN_DERIVED_DATA_PATH}}

  execute_shared_tests:
    needs: build_for_testing
    runs-on: macos-latest
    name: Test Shared module if needed
    env:
      DEVELOPER_DIR: /Applications/Xcode_14.2.0.app/Contents/Developer
      DERIVED_DATA_PATH: ${{ needs.build_for_testing.outputs.derived_data_folder_path }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: actions/download-artifact@master
      with:
        name: derived-data
        path: ${{env.DERIVED_DATA_PATH}}

    - name: Run shared tests
      run: bundle exec fastlane run run_tests derived_data_path:"$DERIVED_DATA_PATH" test_without_building:true testplan:"SharedTestPlan"

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v2
      with:
        report_paths: '**/test_output/xml/report.junit'
        github_token: ${{ secrets.GITHUB_TOKEN }}