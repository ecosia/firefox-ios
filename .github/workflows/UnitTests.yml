name: UnitTests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v2
    - name: install pip modules
      run: |
         python3 -m pip install virtualenv
    - name: install gems
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.7
        bundler-cache: true
    - name: restore npm cache
      uses: actions/cache@v2
      id: cache-npm
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: install node modules
      if: steps.cache-npm.outputs.cache-hit != 'true'
      run: npm ci
    - name: run node modules
      run: npm run build
    - name: restore carthage cache 
      uses: actions/cache@v2
      id: cache-carthage
      with:
        path: Carthage
        key: ${{ runner.os }}-carthage-${{ hashFiles('**/Cartfile.resolved') }}
        restore-keys: |
          ${{ runner.os }}-carthage-
    - name: bootstrap apllication services 
      uses: olejnjak/carthage-workaround@v1
      if: steps.cache-carthage.outputs.cache-hit != 'true'
      with:
        action: bootstrap application-services --platform iOS --cache-builds
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: fix up private Github URLs
      run: find . -type f \( -name '*.pbxproj' -o -name 'Package.swift' -o -name 'Package.resolved' \) -exec sed -i '' "s/https:\/\/github.com\/${GITHUB_REPOSITORY_OWNER}/https:\/\/${GITHUB_ACCESS_TOKEN}@github.com\/${GITHUB_REPOSITORY_OWNER}/g" {} \;
      env:
        GITHUB_ACCESS_TOKEN: ${{ secrets.IOS_CORE_TOKEN }}
    - name: clean packages
      run: xcodebuild -scheme Ecosia -project Client.xcodeproj clean
    - name: clone translations
      run: git clone https://github.com/mozilla-mobile/ios-l10n-scripts.git || exit 1
    - name: import locales
      run: ./ios-l10n-scripts/import-locales-firefox.sh --release
    - name: setup content blocking scripts
      run: (cd content-blocker-lib-ios/ContentBlockerGen && swift run)
    - name: run unit tests
      run: bundle exec fastlane scan
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v2
      with:
        report_paths: '**/test_output/xml/report.junit'
        github_token: ${{ secrets.GITHUB_TOKEN }}
