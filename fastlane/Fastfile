# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/. 
opt_out_usage

fastlane_version "2.210.0"

default_platform :ios

project_path="Client.xcodeproj"
pbx_project_file = "#{project_path}/project.pbxproj"

if ENV['IS_CIRCLECI']
  import_build_tools(
    url: 'git@github.com:mozilla/firefox-ios-build-tools.git',
    clone_folder: "../build-tools",
  )
end

#move all the build tools to the right places
#clone_folder = "../../build-tools"
#sh("rsync -a #{clone_folder}/scripts ../")
#sh("rsync -a #{clone_folder}/fastlane/Appfile Appfile")
#sh("rsync -a #{clone_folder}/fastlane/Snapfile Snapfile")
#sh("rsync -a #{clone_folder}/fastlane/SnapshotHelper.swift SnapshotHelper.swift")
#sh("rsync -a #{clone_folder}/fastlane/scripts .")
#sh("rsync -a #{clone_folder}/fastlane/frames .")
#sh("rsync -a #{clone_folder}/fastlane/templates .")


#import the fastfile
#import "#{clone_folder}/fastlane/BaseFastfile"

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Deploy to MS App-Center"
  lane :appcenter do
    match(
      app_identifier: ['com.ecosia.ecosiaapp.firefox', 'com.ecosia.ecosiaapp.firefox.WidgetKit', 'com.ecosia.ecosiaapp.firefox.ShareTo'], 
      type: "adhoc",
      readonly: true
    )
    increment_build_number(
      build_number: ENV["CIRCLE_BUILD_NUM"]
    )
    gym(
      scheme: "Ecosia",
      project: project_path,
      export_method: "ad-hoc",
      configuration: "Development_AppCenter",
      export_options: {iCloudContainerEnvironment: 'Development'}
    )
    appcenter_upload(
      api_token: ENV["APPCENTER_API_TOKEN"],
      owner_name: ENV["APPCENTER_OWNER_NAME"],
      app_name: "iOS-FF-Beta",
      file: ENV["IPA_OUTPUT_PATH"],
      dsym: ENV["DSYM_OUTPUT_PATH"],
      should_clip: false,
      release_notes: ENV["CIRCLE_BRANCH"],
      notify_testers: false
    )
  end
  
  desc "Testflight build for Beta Channel"
  lane :testflight_beta do
    match(
      app_identifier: ['com.ecosia.ecosiaapp.firefox', 'com.ecosia.ecosiaapp.firefox.WidgetKit', 'com.ecosia.ecosiaapp.firefox.ShareTo'], 
      type: 'appstore',
      readonly: true
    )
    gym(
      scheme: "Ecosia",
      export_method: "app-store",
      configuration: "Development_TestFlight"
    )
    pilot(
      skip_waiting_for_build_processing: true, 
      apple_id: "1541358670",
      itc_provider: "33YMRSYD2L"
    )
  end

  desc "Testflight build for Live Channel"
  lane :testflight_live do

    version_number = get_xcconfig_value(
      path: 'Client/Configuration/Common.xcconfig',
      name: 'MARKETING_VERSION'
    )

    ci_run_build_number = ENV["CIRCLE_BUILD_NUM"]

    udpated_build_number = increment_build_number(
      build_number: ci_run_build_number
    )

    match(
      app_identifier: ['com.ecosia.ecosiaapp', 'com.ecosia.ecosiaapp.WidgetKit', 'com.ecosia.ecosiaapp.ShareTo'],
      type: 'appstore',
      readonly: true
    )

    gym(
      scheme: "Ecosia",
      export_method: "app-store",
      configuration: "Release"
    )

    pilot(
      skip_waiting_for_build_processing: true, 
      apple_id: "670881887",
      itc_provider: "33YMRSYD2L"
    )

    tag_and_push(
      version_number: version_number,
      build_number: udpated_build_number
    )

  end

  desc 'This lane commits the version number update and creates a PR if needed'
  private_lane :branch_commit_push_and_create_pr_if_needed do |options|

    version_number = options[:version_number]
    build_number = options[:build_number]

    git_status_output = sh("git status --porcelain ../#{pbx_project_file}")

    git_diff_output = sh("git diff --unified=0 HEAD -- ../#{pbx_project_file}")

    marketing_version_build_setting_pattern = /^\+\s+MARKETING_VERSION = (.+);/
  
    has_marketing_version_changes = git_diff_output.match?(marketing_version_build_setting_pattern)  

    matching_required_pbx_changes = !git_status_output.empty? && has_marketing_version_changes

    if matching_required_pbx_changes

      version_bump_branch_name = "release-#{version_number}-build-#{build_number}-project-bump"

      # Checkout a new branch
      sh("git checkout -b #{version_bump_branch_name}")

      # Commit the version bump only
      git_commit(
        path: "./#{pbx_project_file}", 
        message: "Version Bump v_#{version_number}_#{build_number} ðŸŒ³"
      )
      
      # Pushes the new branch with committed changes to Git
      push_to_git_remote

      # Creates a pull request from the current (newly created) branch against the main branch
      create_pull_request(
        api_token: ENV["GITHUB_ACCESS_TOKEN"],
        repo: "ecosia/ios-browser",
        title: "Version Bump #{version_number} ðŸŽ‰",
        head: version_bump_branch_name,
        base: "main",
        body: "Version bump PR",
        team_reviewers: "ios"
      )
      
    end

  end

  desc 'This lane performs the expected git steps when releasing'
  private_lane :tag_and_push do |options|
    
    version_number = options[:version_number]
    build_number = options[:build_number]

    add_git_tag(
      tag: "v_#{version_number}_#{build_number}",
      force: true
    )

    push_to_git_remote

  end

  desc 'Store the derived data path into a file'
  private_lane :save_derived_data_path do |options|

    derived_data_path_to_save = options[:derived_data_path]
    derived_data_path_file = "/var/tmp/derived_data_path.txt"

    UI.message("Saving #{derived_data_path_to_save} into #{derived_data_path_file}")

    File.open(derived_data_path_file, 'w') { |file| file.write(options[:derived_data_path]) }

  end

  desc 'This function retrives the written version from the staged VERSION file from the repo'
  def get_version_from_file

    version_file = File.read("VERSION")

    version_line = version_file.split("\n")[0]
    match = version_line.split(":").last.strip.match(/^[0-9.]*$/)
    version = match ? match[0] : nil

    version
  end

  desc 'This function increments the sole pbxproj MARKETING_VERSION without touching targets'
  def udpate_version_in_xcode_proj(pbxproj_file, version_string)

    file_contents = File.read("../#{pbxproj_file}")

    # Update the MARKETING_VERSION build setting
    updated_marketing_version = file_contents.gsub(/(MARKETING_VERSION = )(.+?)(;)/) do |match|
      unless match.include?('${inherited}')
        "#{$1}#{version_string}#{$3}" # Updates the MARKETING_VERSION with the intended value
      else
        match  # Do nothing and return ${inherited}
      end
    end
    
    # Write the updated contents back to the pbxproj file
    File.open("../#{pbxproj_file}", "w") do |file|
      file.puts updated_marketing_version
    end

    # Returns the version string
    version_string
  end

end