# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/. 
opt_out_usage

fastlane_version "2.210.0"

default_platform :ios

project="Client.xcodeproj"

if ENV['IS_CIRCLECI']
  import_build_tools(
    url: 'git@github.com:mozilla/firefox-ios-build-tools.git',
    clone_folder: "../build-tools",
  )
end

#move all the build tools to the right places
#clone_folder = "../../build-tools"
#sh("rsync -a #{clone_folder}/scripts ../")
#sh("rsync -a #{clone_folder}/fastlane/Appfile Appfile")
#sh("rsync -a #{clone_folder}/fastlane/Snapfile Snapfile")
#sh("rsync -a #{clone_folder}/fastlane/SnapshotHelper.swift SnapshotHelper.swift")
#sh("rsync -a #{clone_folder}/fastlane/scripts .")
#sh("rsync -a #{clone_folder}/fastlane/frames .")
#sh("rsync -a #{clone_folder}/fastlane/templates .")


#import the fastfile
#import "#{clone_folder}/fastlane/BaseFastfile"

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc "Deploy to MS App-Center"
  lane :appcenter do
    match(
      app_identifier: ['com.ecosia.ecosiaapp.firefox', 'com.ecosia.ecosiaapp.firefox.WidgetKit', 'com.ecosia.ecosiaapp.firefox.ShareTo'], 
      type: "adhoc",
      readonly: true
    )
    gym(
      scheme: "Ecosia",
      project: project,
      export_method: "ad-hoc",
      configuration: "AppCenter",
      export_options: {iCloudContainerEnvironment: 'Development'}
    )
    appcenter_upload(
      api_token: ENV["APPCENTER_API_TOKEN"],
      owner_name: ENV["APPCENTER_OWNER_NAME"],
      app_name: "iOS-FF-Beta",
      file: ENV["IPA_OUTPUT_PATH"],
      dsym: ENV["DSYM_OUTPUT_PATH"],
      should_clip: false,
      release_notes: ENV["CIRCLE_BRANCH"],
      notify_testers: false
    )
  end
  
  desc "Testflight build for Beta Channel"
  lane :testflight_beta do
    match(
      app_identifier: ['com.ecosia.ecosiaapp.firefox', 'com.ecosia.ecosiaapp.firefox.WidgetKit', 'com.ecosia.ecosiaapp.firefox.ShareTo'], 
      type: 'appstore',
      readonly: true
    )
    gym(
      scheme: "Ecosia",
      export_method: "app-store",
      configuration: "Beta"
    )
    pilot(
      skip_waiting_for_build_processing: true, 
      apple_id: "1541358670",
      itc_provider: "33YMRSYD2L"
    )
  end

  desc "Testflight build for Live Channel"
  lane :testflight_live do

    udpated_version_number = increment_version_number(
      xcodeproj: project,
      version_number: File.read("VERSION")
    )

    udpated_build_number = increment_build_number(
      xcodeproj: project
    )

    match(
      app_identifier: ['com.ecosia.ecosiaapp', 'com.ecosia.ecosiaapp.WidgetKit', 'com.ecosia.ecosiaapp.ShareTo'],
      type: 'appstore',
      readonly: true
    )

    gym(
      scheme: "Ecosia",
      export_method: "app-store",
      configuration: "Release"
    )

    pilot(
      skip_waiting_for_build_processing: true, 
      apple_id: "670881887",
      itc_provider: "33YMRSYD2L"
    )

    commit_version_bump(
      message: "Version Bump v_#{udpated_version_number}_#{udpated_build_number} ðŸŒ³"
    )

    add_git_tag(
      tag: "v_#{udpated_version_number}_#{udpated_build_number}",
      force: true
    )

    push_to_git_remote

  end

  desc 'Store the derived data path into a file'
  private_lane :save_derived_data_path do |options|

    derived_data_path_to_save = options[:derived_data_path]
    derived_data_path_file = "/var/tmp/derived_data_path.txt"

    UI.message("Saving #{derived_data_path_to_save} into #{derived_data_path_file}")

    File.open(derived_data_path_file, 'w') { |file| file.write(options[:derived_data_path]) }

  end

end